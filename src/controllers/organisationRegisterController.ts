/**
 * Service PortalLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateCredentials4Request,
  createCredentials4RequestSchema,
} from '../models/createCredentials4Request';
import {
  GenerateEmailOTP2Request,
  generateEmailOTP2RequestSchema,
} from '../models/generateEmailOTP2Request';
import {
  OrganisationDetail1Request,
  organisationDetail1RequestSchema,
} from '../models/organisationDetail1Request';
import { TESTREQUEST, tESTREQUESTSchema } from '../models/tESTREQUEST';
import {
  VerifyOtp3Request,
  verifyOtp3RequestSchema,
} from '../models/verifyOtp3Request';
import { BaseController } from './baseController';

export class OrganisationRegisterController extends BaseController {
  /**
   * @param body
   * @return Response from the API call
   */
  async organisationDetail1(
    body: OrganisationDetail1Request,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/register/organisationDetail');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      body: [body, organisationDetail1RequestSchema],
    });
    req.json(mapped.body);
    req.authenticate([]);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async generateEmailOTP2(
    body: GenerateEmailOTP2Request,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/register/registerOtp');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      body: [body, generateEmailOTP2RequestSchema],
    });
    req.json(mapped.body);
    req.authenticate([]);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async verifyOtp3(
    body: VerifyOtp3Request,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/register/verifyOtp');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({ body: [body, verifyOtp3RequestSchema] });
    req.json(mapped.body);
    req.authenticate([]);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createCredentials4(
    body: CreateCredentials4Request,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/register/createCredentials');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      body: [body, createCredentials4RequestSchema],
    });
    req.json(mapped.body);
    req.authenticate([]);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async tEST(
    body: TESTREQUEST,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/register/organisationDetail');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({ body: [body, tESTREQUESTSchema] });
    req.json(mapped.body);
    req.authenticate([]);
    return req.call(requestOptions);
  }
}
