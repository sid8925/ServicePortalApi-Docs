/**
 * Service PortalLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { DeleteRequest, deleteRequestSchema } from '../models/deleteRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class CategoryController extends BaseController {
  /**
   * @return Response from the API call
   */
  async list(requestOptions?: RequestOptions): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/category/list');
    req.baseUrl('Server 2');
    req.authenticate([{ bearer: true }]);
    return req.call(requestOptions);
  }

  /**
   * @param file
   * @return Response from the API call
   */
  async add(
    file: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/category/add');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({ file: [file, string()] });
    req.query('file', mapped.file);
    req.authenticate([]);
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async update(requestOptions?: RequestOptions): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH', '/category/update');
    req.baseUrl('Server 2');
    req.authenticate([]);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async mDelete(
    body: DeleteRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/category/delete');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({ body: [body, deleteRequestSchema] });
    req.json(mapped.body);
    req.authenticate([]);
    return req.call(requestOptions);
  }
}
